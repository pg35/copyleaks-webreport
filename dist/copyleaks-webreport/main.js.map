{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/scan.service.ts","./src/environments/environment.ts","./src/main.ts","ignored|/home/cabox/workspace/node_modules/object-inspect|./util.inspect"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport {\n  CopyleaksReportConfig,\n  CopyleaksService\n} from \"@copyleaks/plagiarism-report\";\nimport { ScanService } from \"src/app/scan.service\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  scanId: string = (window as any)[\"pxq_pgck_scan_id\"]; //'coimk6ykypk7naam';\n  userId: string = (window as any)[\"pxq_pgck_user_id\"];\n  url:string = (window as any)[\"pxq_pgck_report_url\"];\n  public config: CopyleaksReportConfig = {\n    download: true,\n  };\n\n  constructor(\n    private reportService: CopyleaksService,\n    private scanService: ScanService //private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    //const scanId = this.activatedRoute.snapshot.params[\"scanId\"];\n    this._buildCopyleaksReportAsync(this.scanId, this.userId);\n  }\n  onDownloadBtnClick(e:any) {\n    const pdfUrl = this.url + `/${this.userId}/${this.scanId}/pdf-report.pdf?download`;\n    window.open(pdfUrl, '_blank');\n  }\n  private async _buildCopyleaksReportAsync(scanId: string, userId: string) {\n    try {\n      /** crawled version handling */\n      const source = await this.scanService.getCrawledVersionAsync(\n        scanId,\n        userId\n      );\n      this.reportService.pushDownloadedSource(source);\n\n      /** complete result handling */\n      const complete = await this.scanService.getCompleteResultAsync(\n        scanId,\n        userId\n      );\n      this.reportService.pushCompletedResult(complete);\n\n      /**\n       * Scan results handling\n       *\n       * for more informations about completeResult.results please see\n       * https://api.copyleaks.com/documentation/v3/webhooks/completed\n       */\n      const allResultsIds = [\n        ...complete?.results?.internet?.map((r) => r.id),\n        //...complete?.results?.database.map((r) => r.id),\n        //...complete?.results?.batch.map((r) => r.id),\n        //...complete?.results?.repositories.map((r) => r.id)\n      ];\n      await Promise.all(\n        allResultsIds.map(async (id) => {\n          const result = await this.scanService.getResultByIdAsync(\n            scanId,\n            id,\n            userId\n          );\n          this.reportService.pushScanResult({ id, result });\n        })\n      );\n    } catch (error) {\n      /** Handle error */\n      console.error(error);\n    }\n  }\n}\n","<cr-copyleaks-report [config]=\"config\" (download)=\"onDownloadBtnClick($event)\"></cr-copyleaks-report>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { CopyleaksReportModule } from \"@copyleaks/plagiarism-report\";\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n\n    CopyleaksReportModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport {\n  CompleteResult,\n  ScanResult,\n  ScanSource\n} from \"@copyleaks/plagiarism-report\";\n\nimport { delay } from \"rxjs/operators\";\nimport { lastValueFrom } from \"rxjs\";\n\nconst REQUEST_DELAY = 3000; // 3 sec\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ScanService {\n  //url = \"https://www.goodcopy.xyz/_pxq_pgck_/report\";\n  url:string = (window as any)[\"pxq_pgck_report_url\"];\n  constructor(private _httpClient: HttpClient) {}\n\n  public async getCrawledVersionAsync(scanId: string, userId: string) {\n    return await lastValueFrom(\n      this._httpClient.get<ScanSource>(\n        this.url + `/${userId}/${scanId}/crawled-version.json`\n      )\n      //.pipe(delay(REQUEST_DELAY))\n      //.toPromise();\n    );\n  }\n\n  public async getCompleteResultAsync(scanId: string, userId: string) {\n    return await lastValueFrom(\n      this._httpClient.get<CompleteResult>(\n        this.url + `/${userId}/${scanId}/completed.json`\n      )\n      //.pipe(delay(REQUEST_DELAY))\n      //.toPromise();\n    );\n  }\n\n  public async getResultByIdAsync(\n    scanId: string,\n    resultId: string,\n    userId: string\n  ) {\n    return await lastValueFrom(\n      this._httpClient.get<ScanResult>(\n        this.url + `/${userId}/${scanId}/${resultId}.json`\n      )\n      //.pipe(delay(REQUEST_DELAY))\n      // .toPromise();\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"],"names":["AppComponent","constructor","reportService","scanService","window","download","ngOnInit","_buildCopyleaksReportAsync","scanId","userId","onDownloadBtnClick","e","pdfUrl","url","open","source","getCrawledVersionAsync","pushDownloadedSource","complete","getCompleteResultAsync","pushCompletedResult","allResultsIds","results","internet","map","r","id","Promise","all","result","getResultByIdAsync","pushScanResult","error","console","i0","selectors","decls","vars","consts","template","ctx","lastValueFrom","REQUEST_DELAY","ScanService","_httpClient","get","resultId","factory","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[6]}